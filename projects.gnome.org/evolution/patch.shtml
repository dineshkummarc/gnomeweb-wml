<!--#set var="title" value="Evolution" -->
<!--#set var="section" value="developer" -->
<!--#include virtual="head.shtml" -->

<h2>Evolution Patch Guidelines</h2>

<p>This document lists some guidelines for writing a good patch which is more likely to be accepted.</p>

<p>Any new features or large scale work should first be discussed on the evolution-hackers list first. This will ensure the idea fits in the direction we wish to take Evolution, and also that the effort is not duplicated. See details on the <a href="index.shtml#mailinglists">mailing lists</a> below.</p>

<h3>Patch Basics</h3>

<ul>
  <li>The patch must apply cleanly at the time it is made.</li>

  <li>It must compile once applied.</li>

  <li>It should not generate any more compile time warnings than were already there. This may be platform dependent, so simply do your best on this one.</li>

  <li>
    It must conform to the C89/C90 standard (ANSI/ISO C), and build with gcc using the default compile flags. The trick here is that that in C99 you may define variables anywhere in the code, in C89 they must be declared in a declaration block which follows any block start '{'. 

    <ul>
      <li>
        <strong>Note:</strong> If you wish to ensure the code is C89, follow these tips from the gcc manual page: 

        <blockquote>
          <tt>To select this standard in GCC, use one of the options '-ansi', '-std=c89' or '-std=iso9899:1990'; to obtain all the diagnostics required by the standard, you should also specify '-pedantic'</tt>
        </blockquote>
        <br>
         You may actually have to use '-std=gnu89' if libraries have taken advantage of gcc extensions and where not compiled similarly, as the above options will disable all GNU extensions.
      </li>
    </ul>
  </li>

  <li>Your patch should not add any extra debug printing unless absolutely necessary. If you need to add debugging printing, consider submitting a seperate patch just to add that output.</li>

  <li>Do not use any gcc extensions, except where they are properly checked for and not used with other compilers. The <tt>glib</tt> library provides some of these features as portable macros and should be used when they cover the required functionality.</li>
</ul>
<strong>GUI Changes</strong> 

<p>If the change requires non-trivial user interface changes, then they will have to be discussed and approved on the evolution-hackers list first. This is highly recommended before embarking on any UI work, or large scale work in general. The <a href="http://library.gnome.org/devel/hig-book/stable/">GNOME Human Interface Guidelings (HIG)</a> document is the place to start on any UI changes or additions.</p>
<strong>Translated String Changes</strong> 

<p>Any changes to translated strings in a stable release must be discussed on the hackers list (see <a href="index.shtml#mailinglists">mailing lists</a>), and/or as part of the patch submission. There must be very good reasons for changing the strings in this case, because they have already been translated once and we don't want to make the translators translate things all over again.</p>

<h3>Coding style</h3>

<p>Generally the coding style employed matches the "Linux Kernel" style. In other words, we use what is essentially a K&amp;R style indenting with 8 space tabs. Tabs should be used rather than space characters. Do not submit patches which merely reformat otherwise unchanged code. To prevent your editor from doing that accidentally, turn off the automatic reformatting features in your editor.</p>

<p>K&amp;R style indenting puts braces on the same line with code, not on their own. The opening parenthesis of a function call or conditional statement should be on the same line as the function. These items should always appear on lines by themselves:</p>

<ul>
  <li><tt>else</tt></li>

  <li><tt>} else</tt></li>

  <li><tt>} else {</tt></li>
</ul>

<p>A single blank line should follow { } blocks (if not immediately followed by the close of another block), and conditional statements, and be used to separate logical groups of statements in the same block.</p>

<p>A single blank line should separate functions and other structures at the top level of the file (i.e. outside functions). The same rule applies to variable declarations at the start of a block.</p>

<p>An example of the most-developer-preferred formatting:</p>
<pre>
<code>TheType
the_function (int frank)
{
        int a = 1;

        if (a == frank) {
                a = foo (a);
        } else {
                do {
                        a = bob (frank) + a;
                } until (a == frank);

                frank = a;
        }

        return (TheType) a;
}
</code>
</pre>

<p>Where there are slight stylistic differences, the style in the surrounding code should be followed. These are guidelines; use your own best judgement.</p>
<strong>Object Casts</strong> 

<p>You can either use C style casts, or Gtk style casts. Note that Gtk style casts can add significant execution overhead, which is not adding any extra checking. e.g. if arguments have already been type-checked by preconditions. Putting a space between a cast and a variable is optional, but preferred by most of the developers.</p>
<strong>Preconditions</strong> 

<p>External api entry points should have preconditions (g_return_if_fail, etc), although their use varies from case to case. Internal entry points and/or when you are guaranteed the type has already been checked, are unecessary. Object initialisation and other virtual method invocations are considered internal entry points.</p>
<strong>Line Lengths</strong> 

<p>Do not expend effort or resort to unreadable formatting merely to fit long lines into 80 columns. We use 8 space tabs, and because of the lack of namespacing other than extending the function name, many of the function and type names are too long for this to be practical. We're not stuck on VT100 terminals any more.</p>

<p>On the other hand, lines should generally not exceed 100 characters, and absolutely not exceed 160 characters. Very deep tab nesting may point to a flawed code design rather than a formatting issue.</p>

<h3>Design</h3>

<p>This is a tricky issue to document, but the design of new code should 'fit' with the existing design of the relevent module. It should at the very least, be no worse.</p>

<p>Code should not cross existing abstraction boundaries or attempt to remove or work around them, if required the existing design may need adjustment.</p>

<p>Type and method names should follow the existing practice in the surrounding code. Method arguments should follow the same order as related methods, and should use the same names for matching parameters.</p>

<p>Per file, static class globals are ok, true globals may be ok, but should be used sparingly. Use 'i' for a loop variable, if that's all it is, don't use 'the_current_index'. etc.</p>

<p><strong>If in doubt, ask on the lists.</strong></p>

<h3>Patch Submission Process</h3>

<p>This section outlines procedures that should be followed when submitting patches to evolution, via the evolution-patches mailing list. For spam-prevention reasons, you must subscribe to the list at <a href="http://mail.gnome.org/mailman/listinfo/evolution-patches">mail.gnome.org</a> before you can submit patches to it.</p>

<p>If you attach a patch to a bug report, please also send it to the list.</p>

<p>Historically, the Evolution project required the copyright on all
non-trivial patches to be assigned to Novell.  As of July 2008, this
is no longer required.  See this
<a href="http://mail.gnome.org/archives/desktop-devel-list/2008-July/msg00065.html">announcement</a>
for details.</p>

<p>If you follow the guidelines listed here, you should generally expect a response within 2 working days. If you re-send the same patch repeatedly, you will less likely to receive attention. <em>Do not re-send the same patch repeatedly.</em></p>
<strong>Clear Subject Lines</strong> 

<ul>
  <li>If the patch addresses a specific bug, please include the bug number in the subject line, along with a summary or description of the bug(s) being addressed, should be the remainder of the subject.</li>

  <li>It is unnecessary to add "[PATCH]", "patch" or similar to the subject line, unless it is being cross-posted to other non-patch</li>
</ul>

<!--#include virtual="foot.shtml" -->
