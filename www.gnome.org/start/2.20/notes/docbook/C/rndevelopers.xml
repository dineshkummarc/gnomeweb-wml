<?xml version="1.0"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY urlfiguresbase "figures/">
<!ENTITY gnomeversion "2.20">
]>

<sect2 id="rndevelopers">
	<title>What's New For Developers</title>

	<para>
		The GNOME &gnomeversion; Developers' Platform provides a stable base for independent
		software developers to create third-party applications. GNOME and its
		platform are licensed to allow the creation of both free and proprietary
		software to run on top of GNOME.
	</para>

	<para>
		Libraries in the GNOME Platform are guaranteed to be API and ABI stable for
		the rest of the GNOME 2.x release series. Libraries in the GNOME Desktop do
		not have this guarantee, but most remain consistent from release to release.
	</para>

	<sect3 id="rndevelopers-gslice">
		<title>GSlice</title>

		<para>
			As of GLib 2.10,
			the GSlice allocator replaces the older GMemChunk and GTrashStacks APIs
			available in GLib. GSlice is very similar to the kernel slab allocator and
			allows for fast, memory-efficient allocation of small structures (e.g.
			GList
			elements, GtkWindow structures). GSlice also has none of the locking
			overhead of GMemChunk, which makes it much faster in multithreaded
			applications.
		</para>

		<figure id="rndevelopers-gslice-graph">
			<title>
				Memory allocator performance allocating and freeing 1 million GList
				elements in 1 (red), 5 (yellow), 10 (green) and 20 (blue) threads.
			</title>
			<mediaobject>
				<imageobject>
					<imagedata
						fileref="&urlfiguresbase;figure-gslice-graph.png"
						format="PNG"/>
				</imageobject>
				<textobject><phrase>
					GSlice performance improvements over other memory allocators
				</phrase></textobject>
			</mediaobject>
		</figure>

		<para>
			GMemChunk has been reimplemented to transparently use GSlice, but the
			GMemChunk API is considered deprecated.
		</para>

		<para>
			To allocate memory with the GSlice allocator, use the call
			<function>g_slice_new (MyStructure);</function>, which will return a
			pointer (ptr). To free memory allocated with GSlice, use the function
			<function>g_slice_free (MyStructure, ptr);</function>.
		</para>

		<para>
			GSlice uses a scalable, thread-local cache of slices of different sizes.
			For large memory requirements, GSlice will transparently and automatically
			use the <function>g_malloc</function> allocator for you, so developers do
			not have to choose the most efficient allocator themselves.
		</para>

	</sect3>

	<sect3 id="rndevelopers-services">
		<title>Service Registration</title>

		<para>
			The latest GNOME now offers a way for developers to register their
			applications to be started up automatically when GNOME starts. To do this,
			you only need to install a <filename>.desktop</filename> file in
			<filename>$prefix/share/gnome/autostart/</filename>,
			<filename>/etc/xdg/autostart/</filename> or
			<filename>~/.config/autostart/</filename>. If you want to install a
			service, but disable it by default, you can add the property
			<property>X-GNOME-autostart-enabled = False</property>.
		</para>

		<para>
			There are some caveats to registering services in this way:
		</para>
		<itemizedlist>
			<listitem><para>
				Applications that register themselves with the session in some other way
				(e.g. nautilus, gnome-panel, vino) should not also register themselves
				in this way.
			</para></listitem>
			<listitem><para>
				Session managed applications will not be handled cleanly, so ensure that
				you pass the <option>--sm-disable</option> flag on your
				<option>Exec</option> line.
			</para></listitem>
		</itemizedlist>
	</sect3>

</sect2>
<!-- vi:set tw=80 ts=2: -->
