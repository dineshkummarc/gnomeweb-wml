<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Spreadsheet Modeling</title><link rel="previous" href="sect-advanced-analysis-solver-linearprog.shtml" title="Introduction to Linear Programming"/><link rel="next" href="sect-advanced-analysis-solver-using.shtml" title="Using Solver"/><link rel="top" href="index.shtml" title="The Gnumeric Manual, version 1.7"/><link rel="stylesheet" type="text/css" href="gnumeric-doc.css"/></head><body><div class="body"><div class="sect2"><a name="sect-advanced-analysis-solver-modeling"/><h1 class="sect2 title"><span class="title">Spreadsheet Modeling</span></h1><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">To solve optimization problems with Gnumeric you have to
    type in the problem into a sheet.  A recommended way to start with
    is to allocate a separate column in the spreadsheet for each
    decision variable (in the previous example the x, y, and z) and a
    separate row for each constraint (the constraints #1-#4).  The
    coefficients of these variables should be placed into the cells
    corresponding to the allocated row and the column.  It is also
    recommended that you label the rows and the columns to make the
    sheet much more readable.  The sheet for our maximization problem
    would look like this:</p><div xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="figure block-indent"><a name="fig-linear-program-example"/>
      <div class="title"><span class="title"><span class="label"><span style="font-style: italic; ">Figure 6-1</span>â€ƒ</span>Linear programming example</span></div>
      <div class="screenshot">
        <div class="mediaobject"><img src="figures/solver-01.png"/></div>
      </div>
    </div><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">As you can see, we have put the model variables into cells
    B3:D3.  They are currently all zeros.  The cell E4 contains the
    objective function definition.  The easiest way to define it is to
    use SUMPRODUCT build-in function.  Thus in our model, we have the
    formula `=SUMPRODUCT(B3:D3,B4:D4)' in E3.</p><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">The constraints are defined in rows seven to ten.  Since
    the coefficients of these functions are in columns B, C and D we
    will get the total sum of each of the constraint using the
    formula `SUMPRODUCT(B$3:D$3,Bn:Dn)' where n is the row number of
    the constraint.  For example, in E7 we have
    `=SUMPRODUCT(B$3:D$3,B7:D7)', in E8 `=SUMPRODUCT(B$3:D$3,B8:D8)'
    and so on.  The right hand side (RHS) values of the constraints
    are typed into cells G7:G10.</p></div></div><div class="navbar"><div class="navbar-prev"><span class="navbar-prev"><a class="navbar navbar-prev" href="sect-advanced-analysis-solver-linearprog.shtml" title="Introduction to Linear Programming">Introduction to Linear Programming</a></span></div><div class="navbar-next"><span class="navbar-next"><a class="navbar navbar-next" href="sect-advanced-analysis-solver-using.shtml" title="Using Solver">Using Solver</a></span></div></div></body></html>
