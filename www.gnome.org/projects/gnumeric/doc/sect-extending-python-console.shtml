<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>The Python Console</title><link rel="previous" href="sect-extending-python-install.shtml" title="Installing and Building Gnumeric for Python"/><link rel="next" href="sect-extending-python-builtins.shtml" title="Using the built-in Python functions"/><link rel="top" href="index.shtml" title="The Gnumeric Manual, version 1.7"/><link rel="stylesheet" type="text/css" href="gnumeric-doc.css"/></head><body><div class="body"><div class="sect2"><a name="sect-extending-python-console"/><h1 class="sect2 title"><span class="title">The Python Console</span></h1><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
      There is an interactive Python console available from inside
      Gnumeric. This is a good place to explore things, and if the
      console is expanded, will be a nice place for scripting. In the
      meantime, what I have called "Spellbooks" below are much more
      useful, but are fixed plugins as of Gnumeric startup. So right
      now I putter in the console as I develop plugin literal in the
      form of spellbooks. After 1.2.0, Gnumeric will be working on its
      scripting API, so the two approaches may merge. Or not.
    </p><div class="sect3"><a name="sect-extending-python-console-enabling"/><h2 class="sect3 title"><span class="title"><span class="label">13.3.2.1. </span>Enabling the Python Console</span></h2><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
        You can run a Python interpreter from inside Gnumeric, but you
        have to turn it on. To do this you simply uncomment a line in
        python-loader/plugins.xml. Normally, that file lives in
        /usr/lib/gnumeric/<span class="emphasis" style="font-style: italic; ">$version</span>/plugins/python-loader/,
        or perhaps <span class="emphasis" style="font-style: italic; ">/usr/local/lib...</span> on Red Hat.
        I used to suggest making a local but you should probably make
        a local copy, but that was pain for little gain. So:
      </p><div class="list"><div class="procedure"><ol><li>
            <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
              <span class="literal" style="font-family: monospace; ">gnumeric --version</span> to make sure you
              get the right version name for the following. (You'll
              have to do this for every new version of Gnumeric!).
            </p>
          </li><li>
            <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
              <span class="literal" style="font-family: monospace; ">cd ~/.gnumeric/</span>
                <span class="emphasis" style="font-style: italic; ">$version</span>
                 <span class="literal" style="font-family: monospace; ">/plugins/</span>
            </p>
          </li><li>
            <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
              Edit <span class="literal" style="font-family: monospace; ">python-loader/plugin.xml</span>.
            </p>
          </li><li>
           <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
               Uncomment the five lines starting with
               <span class="literal" style="font-family: monospace; ">ui-console-menu service</span> near the
               bottom (remove the "&lt;!--" and "--&gt;" tags around
               the &lt;service...&gt; and &lt;/service&gt; tags.
            </p>
          </li><li>
            <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
              Save the file.
            </p>
          </li><li>
            <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
              Start gnumeric (same version).
            </p>
          </li><li>
            <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
              Select from the <span class="guimenu" style="font-weight: bold; ">Tools</span> the <span class="guimenuitem" style="font-weight: bold; ">Python
              console</span>.
            </p>
          </li><li>
            <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
              <span class="emphasis" style="font-style: italic; ">Enjoy!</span>
            </p>
          </li></ol></div></div></div><div class="sect3"><a name="sect-extending-python-console-playing"/><h2 class="sect3 title"><span class="title"><span class="label">13.3.2.2. </span>Playing with the Python console</span></h2><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
        At the top there is a drop-down menu <span class="guimenu" style="font-weight: bold; ">Execute
        in</span>. Right now your only choice will be
        <span class="guimenuitem" style="font-weight: bold; ">Default</span>. After you evaluate functions
        from other plugins, those environments will become available
        too (JK says this is called lazy loading). But I'll assume you
        are using Default. (The only real difference is that you have
        to import Gnumeric first, and you can't see your plugin
        functions.)
      </p><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
        (Note: older releases required you to type <span class="literal" style="font-family: monospace; ">print
        dir()</span> instead of just
        <span class="literal" style="font-family: monospace; ">dir()</span>. Fixed in cvs 16 June 2003, and
        certainly in 1.1.20 and higher.
      </p><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
        Let's start by taking a look at the environment.
      </p><div xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="programlisting block-indent"><pre class="programlisting">&gt;&gt;&gt; import <span class="co">1</span>Gnumeric
&gt;&gt;&gt; dir()
['Gnumeric', '__builtins__', '__doc__', '__name__']
&gt;&gt;&gt; dir(Gnumeric)
['Boolean', 'CellPos', 'FALSE', 'GnumericError', 'GnumericErrorDIV0',
'GnumericErrorNA', 'GnumericErrorNAME', 'GnumericErrorNULL',
'GnumericErrorNUM', 'GnumericErrorRECALC', 'GnumericErrorREF',
'GnumericErrorVALUE', 'MStyle', 'Range', 'TRUE', '__doc__',
'__name__', <span class="co">2</span>'functions', 'plugin_info', 'workbook_new', 'workbooks'] 

      </pre></div>
      
        <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
          'Gnumeric' is a module that exists only within Gnumeric, and
          which defines the Gnumeric Python API.
        </p>
      

      
        <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
          Gnumeric.functions is the list of all the Gnumeric functions
          you would see in the function browser. You cannot yet do
          <span class="literal" style="font-family: monospace; ">dir(Gnumeric.functions)</span> but maybe someone
          will bind that soon.
        </p>

        <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
          RangeRef is not listed. That seems to limit us, though later
          in the tutorial we'll see how to use regular functions to
          get inside RangeRefs.
        </p>

      
      <p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
        So do some exploring. First, let's poke around to figure out
        how to use CellPos.
      </p><div xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="programlisting block-indent"><pre class="programlisting"># I wonder how to use CellPos (I've glanced at the source, but...)

&gt;&gt;&gt; dir(Gnumeric.CellPos)                 # shows nothing useful

&gt;&gt;&gt; Gnumeric.CellPos()                    
TypeError: CellPos() takes exactly 2 arguments (0 given)  

&gt;&gt;&gt; Gnumeric.CellPos("a1","a2") 
TypeError: an integer is required.        # Right. 

&gt;&gt;&gt; a=Gnumeric.CellPos(1,2)               # It worked!
&gt;&gt;&gt; a
&lt;CellPos object at 0x106b6eb8&gt;      # Yeah, I know...

&gt;&gt;&gt; dir(a)
['get_tuple']

&gt;&gt;&gt; a.get_tuple()
(1,2)                                     # Cool. That's (col,row)

&gt;&gt;&gt; str(a)                                # Super cool.
'B3'                                      # JK hasn't implemented this for tuples yet
       </pre></div><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">
         Similarly, we can explore Gnumeric.Range:
       </p><div xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="programlisting block-indent"><pre class="programlisting">&gt;&gt;&gt; r = Gnumeric.Range((1,2),(3,4))
TypeError: Range() argument 1 must be CellPos, not tuple

&gt;&gt;&gt; r = Gnumeric.Range(a,a)
&gt;&gt;&gt; r
&lt;Range object at 0x1071d888&gt;

&gt;&gt;&gt; dir(r)
['get_tuple']

&gt;&gt;&gt; r.get_tuple()
(3, 7, 3, 7)
	  </pre></div><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">If you
		evaluate in the context of a plugin (rather than in Default), then
		<span class="literal" style="font-family: monospace; ">dir(Gnumeric.plugin_info)</span> will reveal some simple
		informational functions you can call for the local plugin(s).</p><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">Note: obviously I don't really know what I'm doing, or I wouldn't
		be poking around like this.</p></div><div class="sect3"><a name="sect-extending-python-console-morefun"/><h2 class="sect3 title"><span class="title"><span class="label">13.3.2.3. </span>More fun with the Python console</span></h2><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">Jon K. Hellan writes, "Here are some more things you can do
	  from the console:"</p><div xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="programlisting block-indent"><pre class="programlisting"># Get a workbook
&gt;&gt;&gt; wb=Gnumeric.workbooks()[0]
&gt;&gt;&gt; wb
&lt;Workbook object at 0x862a490&gt;
&gt;&gt;&gt; dir(wb)
&gt;&gt;&gt; ['gui_add', 'sheet_add', 'sheets']

# Get a sheet
&gt;&gt;&gt; s=wb.sheets()[0]
&gt;&gt;&gt; s
&lt;Sheet object at 0x863e8d0&gt;
&gt;&gt;&gt; dir(s)
['cell_fetch', 'get_extent', 'get_name_unquoted', 'rename',
'style_apply_range', 'style_get', 'style_set_pos', 'style_set_range']

# Get a cell. s.cell_fetch(0,0) and s[0,0] are synonyms. First
# coordinate is columns, i.e. s[1,0] is B1.
&gt;&gt;&gt; c=s[0,0]
&gt;&gt;&gt; c
&lt;Cell object at 0x863d810&gt;
&gt;&gt;&gt; dir(c)
['get_entered_text', 'get_mstyle', 'get_rendered_text', 'get_value',
'get_value_as_string', 'set_text']

# Change the cell - it changes in the grid
&gt;&gt;&gt; c.set_text('foo')

# Retrieve the cell - both ways.
&gt;&gt;&gt; c.get_value()
foo
&gt;&gt;&gt; s.cell_fetch(0,0).get_value()
foo
</pre></div><p xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/l10n" class="para">Very, very nice.  Note, after setting a value, it won't show up
		until that cell is redrawn. That will happen automatically with plugin
		functions, but in the console, you may have to click on the cell.
	  </p></div></div></div><div class="navbar"><div class="navbar-prev"><span class="navbar-prev"><a class="navbar navbar-prev" href="sect-extending-python-install.shtml" title="Installing and Building Gnumeric for Python">Installing and Building Gnumeric for Python</a></span></div><div class="navbar-next"><span class="navbar-next"><a class="navbar navbar-next" href="sect-extending-python-builtins.shtml" title="Using the built-in Python functions">Using the built-in Python functions</a></span></div></div></body></html>
