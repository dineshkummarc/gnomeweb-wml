<!--#set var="title" value="Evolution" -->
<!--#include virtual="head.shtml" -->

<p><h2>Evolution and Evolution Data Server</h2> 

<p>There are two major components involved the operation of Evolution,
the client and the data server.  The client, called "Evolution", is
responsible for what the user sees on the screen.  The data server,
called "Evolution Data Server" is responsible for managing calendar
and addressbook information.

<p><h2>Evolution Data Server</h2>

<p>The Evolution Data Server resides in the evolution-data-server <a
href="cvs.html">CVS</a> module or the evolution-data-server package and
is logically separated into client libraries and the backend implementations.  

<p>There are currently client libraries for addressbooks and calendars
(calendars in this case referring to events and tasks), although this
does not preclude the addition of other major types of data stores.
The client libraries use CORBA (via bonobo) to communicate with the
backends, but the communications layer is hidden from the user.

<p>A backend implementation is divided into two parts, the corba
pieces which handle incoming requests and outgoing responses and the
pluggable C backends which do most of the work communicating with the
storage mechanism.  Both these pieces reside in a separate process to
handle multiple clients properly.  The corba piece is asyncrhonous,
the calls are made "oneway" and the responses are sent "oneway". The
pluggable C backends register themselves with the corba piece as a
handler for various protocol types (and in the case of the calendar
iCalendar object types) and when the corba piece gets a request for a
calendar or addressbook it instantiates an appropriate C backend.  The
backends are asynchronous in nature, however to simplify the building
of a backend you can subclass the synchronous backend class and
implement it instead.

<p><h2>Evolution</h2>


<!--#include virtual="foot.shtml"-->
