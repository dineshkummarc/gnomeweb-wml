<!--#set var="title" value="Evolution" -->
<!--#include virtual="head.shtml" -->

<p><h1>Evolution Road Map</h1>

<p>This plan covers 3 versions after 2.0, coinciding with approximately 6 month releases cycles of GNOME, this is mostly core stuff and not absolute (for instance we'd put in other backends for opengroupware, exchange it, etc if they became available).  We want to list specific functional goals that are largish in nature.&nbsp; A lot of smaller features will just end up as EPlugins.</p>

The current development version is 2.1 and coincides with <a href="http://www.gnome.org/start/2.9/">GNOME 2.9</a>.

<H2>Evolution 2.2 (Spring 2005)</H2>

<b>Mail</b>
<UL>
    <LI>IMAP rewrite to improve async server notification handling (IMAP4 camel provider) (fejj)
    <LI>detaching camel from evolution
    <LI>archiving of remote mail
</UL>

<b>Contacts</b>
<UL>
    <LI>supported fields handling (supported/not supported, required, ranges allowed) so the editor can disable fields appropriately 
    <LI>online/offline support for LDAP (siva)
</UL>

<b>Calendar/Tasks</b>
<UL>
    <LI>detached instance support in the GUI and file backend (rodrigo)
    <LI>supported fields handling (supported/not supported, required, ranges allowed) so the editors can disable fields appropriately 
    <LI>online/offline support using cache for webcal 
    <LI>attachments (harish)
</UL>

<b>EPlugin</b>
<UL>
    <LI>hook into any popup menu (NotZed)
    <LI>hook into main menu's, based on current view and view context (NotZed)
    <LI>hook into configuration pages (NotZed)
    <LI>hook into in-line display of mail content, at the very least for imip and the like (NotZed)
    <LI>mono wrappers to write plugins (experimental only) (NotZed)
</UL>

<b>Groupwise</b>
<UL>
    <LI>online/offline support (siva)
    <LI>proxy user access 
    <LI>shared folders (vivek)
    <LI>permission management 
    <LI>delivery and read receipt status tracking 
    <LI>retract and recall messages
    <LI>server side rules
    <LI>detached instance support (harish)
    <LI>convert mail backend to soap (partha)
</UL>

<b>Exchange</b>
<UL>
    <LI>online/offline support (sush and chen)
    <LI>integrate ximian-connector-setup functionality into the Evo Acct Assistant for adding Exchange account (sush)
    <LI>remove need for separate exchange component for public folder handling
    <LI>open other user's entire mailbox (surf)
    <LI>display pre-emptive password expiration warnings (sush)
    <LI>display quota messages sent by Exchange Server (surf)
    <LI>delivery and read receipt status tracking (surf)
    <LI>display folder sizes 
    <LI>server side rules
</UL>

<b>Other</b>
<UL>
    <LI>MacOS X Port (hpj)
    <LI>RTL support in GtkHTML (rodo)
    <LI>RTL support throughout the shell and mail/contacts/calendar/tasks components 
    <LI>merge needed gal pieces into evolution 
    <LI>loadable backend modules in eds (toshok)
    <LI>gnome-key-ring instead of e-password (e-password could be a wrapper) (dhm)
</UL>


<H2>Evolution 2.4 (Autumn 2005)</H2>

<b>Mail</b>
<UL>
    <LI>camel plugins 
</UL>

<b>Contacts</b>
<UL>
    <LI>default to using flat file backend 
</UL>

<b>Calendar/Tasks</b>
<UL>
    <LI>our own libical implementation based on the vcard parser 
    <LI>decline/counter and counter support 
    <LI>comments when declining IMIP requests 
</UL>

<b>EPlugin</b>
<UL>
    <LI>filter types, if camel filters can also be customisable (needed for server-side rules) 
    <LI>pluggable junk stuff, although some of that might need camel plugins instead. 
    <LI>event stuff, like 'message shown', 'folder opened', 
    <LI>backward hooks so you could do things like run a server which interacts with internal data 
    <LI>mono wrappers to write plugins
</UL>

<b>Groupwise</b>
<UL>
    <LI>delay delivery of mail until specified time 
    <LI>request reply of mail within a specified time frame
</UL>

<b>Exchange</b>
<UL>
    <LI>task delegation 
</UL>

<b>Other</b>
<UL>
    <LI>unified account support to share connection information among backend types 
    <LI>SMIME certificate revocation lists (CRLs) so certificates expire, support for downloading the CRLs automatically on a schedule
</UL>

<H2>Evolution 2.6 (Spring 2006)</H2>

<b>Contacts</b>
<UL>
    <LI>self/identity <A HREF="http://lists.ximian.com/archives/public/evolution-hackers/2004-February/002909.html">http://lists.ximian.com/archives/public/evolution-hackers/2004-February/002909.html</A> 
    <LI>non canvas mini card view
</UL>

<b>Calendar/Tasks</b>
<UL>
    <LI>rich text (HTML) for calendar/task descriptions
</UL>

<b>Other</b>
<UL>
    <LI>desktop wide timezone setting 
    <LI>synchronization of evolution installs (settings, accounts, data, etc) 
    <LI>expand/fix the shell api's to make them useful for remote control/access to evolution. 
    <LI>removal of e-text (by gtktextview) 
    <LI>configuration of e-d-s without the evolution client
</UL>

<H2>EPlugin</H2>

Interesting eplugin ideas have the "eplugin" keyword in <a href="http://bugzilla.ximian.com/buglist.cgi?bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED&email1=&emailtype1=substring&emailassigned_to1=1&email2=&emailtype2=substring&emailreporter2=1&changedin=&chfieldfrom=&chfieldto=Now&chfieldvalue=&short_desc=&short_desc_type=substring&long_desc=&long_desc_type=substring&bug_file_loc=&bug_file_loc_type=substring&keywords=eplugin&keywords_type=anywords&op_sys_details=&op_sys_details_type=substring&version_details=&version_details_type=substring&cmdtype=doit&namedcmd=Calendar+Bugs&newqueryname=&order=Reuse+same+sort+as+last+time&form_name=query">bugzilla</a>.

<H2>Other ideas</H2>

<UL>
    <LI>improving import/export (UI, error reporting, progress reporting) 
    <LI>doing future migration in EDS itself 
    <LI>long term future of etable/etree 
    <LI>C# wrappers for ECalBackend and EBookBackend to make rapid prototyping and testing easier 
    <LI>removing camel backend configuration from using a url to specify all configuration, since that isn't dynamic enough.&nbsp; Is kind of partially there with the persistent properties thing. 
    <LI>expand/fix the shell api's to make them useful for remote control/access to evolution.&nbsp; Actually a whole overhaul of the idl's wouldn't go astray, it isn't a huge task either.&nbsp; They're nasty and kind of useless outside of evolution right now (showURI is the only really usable method). 
    <LI>changing camel's store/folder apis to make them easier to implement.&nbsp; the ability to create a folder object without opening the folder and the like, would simplify all the nasty getfolderinfo and rename stuff. 
    <LI>using the plugin stuff to map things like backend configurators to the frontend 'loosely'.&nbsp; e.g. a custom camel provider might include the camel code, but also a plugin which the front-end will load *separately* to configure it, rather than the messy camelprovider tables which don't provide much flexibility.&nbsp; The same could happen w/ eds rather than using non-arbitrary property settings that the front-end needs to have specific info about. 
    <LI>have product design revisit the SMIME UI 
    <LI>auto email harvesting from incoming messages (for autocompletion) 
    <LI>expose saved searches as subfolders of contact folders (or add another root to the source tree: &quot;Saved Searches&quot; or &quot;Contact VFolders&quot; or whatever).&nbsp; It would be trivial to implement these entirely in the UI (you just &quot;(and &lt;saved-query&gt; &lt;ui-query&gt;)&quot; to do searches).&nbsp; If possible, add in ActiveDirectory's saved searches.
</UL>

<!--#include virtual="foot.shtml"-->
