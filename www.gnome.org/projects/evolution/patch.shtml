<!--#set var="title" value="Evolution" -->
<!--#include virtual="head.shtml" -->

<p><h1>Evolution Patch Guidelines</h1>

<p>
This document lists some guidelines for writing a good patch which is
more likely to be accepted.
</p>

<p>
Any new features or large scale work should first be discussed on the
evolution-hackers list first.  This will ensure the idea fits in the
direction we wish to take Evolution, and also that the effort is not
duplicated.  See details on the <a href="#mailinglists">mailing lists</a> below.
</p>

   
<h2>Patch Basics</h2>

<ul>
<li> The patch must apply cleanly at the time it is made.</li>
<li> It must compile once applied.</li>

<li> It should not generate any more compile time warnings than were
  already there.  This may be platform dependent, so simply do your
  best on this one.</li>

<li> It must conform to the C89/C90 standard (ANSI/ISO C), and build
      with gcc using the default compile flags.  The trick here is
      that that in C99 you may define variables anywhere in the code,
      in C89 they must be declared in a declaration block which
      follows any block start '{'.
<ul>
  <li>
  <b>Note:</b> If you wish to ensure the code is C89, follow these
  tips from the gcc manual page: 

<blockquote><tt>To select this standard in GCC,
  use one of the options '-ansi', '-std=c89' or '-std=iso9899:1990';
  to obtain all the diagnostics required by the standard, you should
  also specify '-pedantic'</tt></blockquote> 

<br> You may actually have to use
  '-std=gnu89' if libraries have taken advantage of gcc extensions and
  where not compiled similarly, as the above options will disable all
  GNU extensions.</li>

</ul>
</li>
<li> Your patch should not add any extra debug printing unless
absolutely necessary. If you need to add debugging printing, consider
submitting a seperate patch just to add that output.</li>


<li> Do not use any gcc extensions, except where they are properly
  checked for and not used with other compilers.  The <tt>glib</tt>	
  library provides some of these features as portable macros and
  should be used when they cover the required functionality.</li>
</ul>

<h3>GUI Changes</h3>

<p>
If the change requires non-trivial user interface changes, then they
will have to be discussed and approved on the evolution-hackers list
first.  This is highly recommended before embarking on any UI work, or
large scale work in general.  The <a
href="http://developer.gnome.org/projects/gup/hig/">GNOME Human
Interface Guidelings (HIG)</a> document is the place to start on any
UI changes or additions.
</p>

<h3>Translated String Changes</h3>

<p> Any changes to translated strings in a stable release must be
discussed on the hackers list (see <a href="#mailinglists">mailing
lists</a>), and/or as part of the patch submission.  There must be
very good reasons for changing the strings in this case, because they
have already been translated once and we don't want to make the
translators translate things all over again.
 </p>

   
<h2>Coding style</h2>

<p> 
Generally the coding style employed matches the "Linux Kernel"
style. In other words, we use what is essentially a K&R style
indenting with 8 space tabs.  Tabs should be used rather than space
characters.  Do not submit patches which merely reformat otherwise
unchanged code. To prevent your editor from doing that accidentally,
turn off the automatic reformatting features in your editor. 
</p>

<p> K&R style indenting puts braces on the same line with code, not on
their own.  The opening parenthesis of a function call or conditional
statement should be on the same line as the function.  These items
should always appear on lines by themselves:</p>

<ul>
<li><tt>else</tt></li>
<li><tt>} else</tt> </li>
<li><tt>} else {</tt></li>
</ul>

<p>
A single blank line should follow { } blocks (if not immediately
followed by the close of another block), and conditional statements,
and be used to separate logical groups of statements in the same
block.</p>

<p>
A single blank line should separate functions and other
structures at the top level of the file (i.e. outside functions).  The
same rule applies to variable declarations at the start of a block.
</p>

<p>
An example of the most-developer-preferred formatting:
</p>

<p>
<pre><tt>
TheType
the_function (int frank)
{
        int a = 1;

        if (a == frank) {
                a = foo (a);
        } else {
                do {
                        a = bob (frank) + a;
        	} until (a == frank);

                frank = a;
        }

        return (TheType) a;
}
</tt></pre>
</p>

<p> 
Where there are slight stylistic differences, the style in the
surrounding code should be followed. These are guidelines; use your
own best judgement.
</p>
   
<h3>Object Casts</h3>

<p>
You can either use C style casts, or Gtk style casts.  Note that Gtk
style casts can add significant execution overhead, which is not
adding any extra checking.  e.g. if arguments have already been
type-checked by preconditions.  Putting a space between a cast and a
variable is optional, but preferred by most of the developers.
</p>

<h3>Preconditions</h3>

<p>
External api entry points should have preconditions (g_return_if_fail,
etc), although their use varies from case to case.  Internal entry
points and/or when you are guaranteed the type has already been
checked, are unecessary.  Object initialisation and other virtual
method invocations are considered internal entry points.
</p>

<h3>Line Lengths</h3>

<p>
Do not expend effort or resort to unreadable formatting merely to
fit long lines into 80 columns.  We use 8 space tabs, and because of
the lack of namespacing other than extending the function name, many
of the function and type names are too long for this to be practical.
We're not stuck on VT100 terminals any more.
</p>

<p>
On the other hand, lines should generally not exceed 100
characters, and absolutely not exceed 160 characters.  Very deep tab
nesting may point to a flawed code design rather than a formatting
issue.
</p>


   
<h2>Design</h2>

<p>
This is a tricky issue to document, but the design of new code should
'fit' with the existing design of the relevent module.  It should at
the very least, be no worse.
</p>

<p>
Code should not cross existing abstraction boundaries or attempt to
remove or work around them, if required the existing design may need
adjustment.
</p>

<p>
Type and method names should follow the existing practice in the
surrounding code.  Method arguments should follow the same order as
related methods, and should use the same names for matching
parameters.
</p>

<p>
Per file, static class globals are ok, true globals may be ok, but
should be used sparingly.  Use 'i' for a loop variable, if that's all
it is, don't use 'the_current_index'.  etc.
</p>

<p>
<b>If in doubt, ask on the lists.</b>
</p>

<h2>Patch Submission Process</h2>

<p> This section outlines procedures that should be followed when
submitting patches to evolution, via the evolution-patches mailing
list. For spam-prevention reasons, you must subcribe to the list at <a
href="http://lists.ximian.com/mailman/listinfo/evolution-patches">lists.ximian.com</a>
before you can submit patches to it.
</p>

<p>
If you attach a patch to a bug report, please also send it to the list.
</p>

<p> Any non-trival patches (typically, more than five lines) also
require copyright assignment.  See <a
href="http://developer.ximian.com/projects/evolution/copyright.html">the
Evolution copyright page</a> for details.  </p>

<p>
If you follow the guidelines listed here, you should generally expect
a response within 2 working days.  If you re-send the same patch
repeatedly, you will less likely to receive attention.  <i>Do not
re-send the same patch repeatedly.</i>
</p>

<h3>Clear Subject Lines</h3>

  <ul>
    <li> If the patch addresses a specific bug, please include the bug
      number in the subject line, along with a summary or description of the
      bug(s) being addressed, should be the remainder of the subject. </li>

    
    <li>
      It is unnecessary to add "[PATCH]", "patch" or similar to the subject
      line, unless it is being cross-posted to other non-patch lists.
    </li>
    
    <li>
      It is absolutely unnecessary to add "please consider", "please review",
      or "seeking review", or similar, to the subject line.  Please do not do
      this.
    </li>
    
    <li>
      Where the patch does not address a specific bug number, then the subject
      line should simply be a concise summary of the problem/feature it
      addresses.
    </li>
    
    <li>

      In all cases the subject line should include the module(s) to which the
      patch applies, and would generally match the component on the bug or
      the top-level module directory (e.g. camel, mail, addressbook, use 'all'
      for more than 3 or 4 modules).
    </li>
  </ul>
  <p>
    <b>For example:</b><br>
      Good: Bug 23463: Race condition in mail SMTP code<br>
	Bad: Please consider this patch.
  </p>

<h3>Message Body</h3>

<p> Patches should be attached as attached diff files. For related
changes, use a single file where possible.
</p>

<p> The diff must be in unified diff format. The commands <tt>cvs diff
-up filename</tt> or <tt>cvs diff -u filename</tt> should work. If you
have added files, use the -N flag as well; adding files will require
you to have write access to the cvs repository.
</p>

<p> 
If the patch does not address a specific bug, then the patch email
should describe which feature or problem it addresses.  If it does
address a specific bug, then further explanation beyond the bug
commentary is optional, although often convenient. 
</p>

<p> In all cases you should include which branch, or branches, the
patch is intended to apply to.  If this is not given it will be
assumed to be the trunk (HEAD); and such patches should not, and will
not, be applied to stable branches without further approval.  </p>

<h3>ChangeLogs</h3>

<p> All patches must include appropriate ChangeLog diffs, to the
appropriate ChangeLog(s) for the given change.  (Tip: Emacs will
automatically find the correct one, and format the entry
appropriately).  All but the most trivial of patches will not be
considered or discussed without this.  It is ok to contain extra
ChangeLog entries for other pending patches, but they should not be
excessively long - it isn't that hard to isolate patch diffs.

<p>
If the patch addresses a bug in <a
href="http://bugzilla.ximian.com">bugzilla</a> (and it should), then
the ChangeLog entry must refer to that bug number.  If it addresses a
bug in another bug system, it must also indicate which bug system
('gnome bugzilla' 'red-hat bugzilla', etc).  </p>

<h3>Stable Branches</h3>

<p>
Generally, any patch to the stable branch from non-core developers
must address a specific bug in bugzilla.ximian.com.  The patch should
also be attached to the bug in question, with the keyword 'patch' set
on the bug report.  The patch email must identify which stable branch
and version it is to apply to.
</p>
<a target="mailinglists"></a>
 
<h2>Mailing lists</h2>

<p> 
<b>Use the lists.</b> They are the major communication and
coordination mechanism. Lurk for awhile to get a feel for them. Search
the archives. Don't be afraid to pipe up and say hello. 
</p>

<h3>Evolution Hackers</h3>

<p> If you wish to discuss patches before they are submitted, or ideas
before you start to work on them, do it on the evolution-hackers list,
which may be subscribed and viewed at <a
href="http://lists.ximian.com/mailman/listinfo/evolution-hackers">lists.ximian.com</a>.


</p>

<p>
This is a low-volume list (5-10 posts per day on average).
</p>
<p>
Some patches may be discussed here to get a wider audience, although
once a patch has been made it should generally be discussed on
evolution-patches.
</p>

<p> 
Feature requests, bug reports, and other user related discussions,
without the intention to write code to address them, will be
ignored. To report bugs or request features, use <a href="http://bugzilla.ximian.com">bugzilla</a>.
</p>

<h3>Evolution Patches</h3>

<p>
The patch submission list evolution-patches may be subscribed and
viewed at
'http://lists.ximian.com/mailman/listinfo/evolution-patches'.  Once a
patch has been written, it may be submitted here for discussion, as
well as final approval.
</p>

<p>
Any non-patch related postings to this list will be ignored.
</p>

<!--#include virtual="foot.shtml"-->
