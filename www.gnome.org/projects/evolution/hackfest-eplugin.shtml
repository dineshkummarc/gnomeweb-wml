<!--#set var="title" value="Evolution: EPlugin Hackfest" -->
<!--#set var="section" value="developer" -->
<!--#include virtual="head.shtml" -->



<p>On Thursday Dec. 13th, 2004 the Evolution Team is going to have an EPlugin Hackfest on irc in #evolution on gimp net.  We want everyone to see just how cool EPlugin is, to help shake out bugs and implement those niggly little features you've always wanted.  It should start around 10am Perth Australia time and go to about 5pm Boston time.

<h3>Plugin Hooks</h3>

<p>Currently there are four major types of plugin "hooks" you can write against, each of which now has a sample in CVS.

<p>1) Popup Menus (<a href="http://cvs.gnome.org/viewcvs/evolution/plugins/select-one-source/">select-one-source</a>)

<p>You can add popup menu items to any popup menu in Evolution.  You can add the item to all instances of the popup or mask it based on various criteria, for instance whether or not the folder is the "Junk" folder.  The plugin is activated when the menu item is selected and you will receive relevant contextual information, such as the message being acted on.
        
<p>2) Menus (<a href="http://cvs.gnome.org/viewcvs/evolution/plugins/save-attachments/">save-attachments</a>)

<p>You can add menu items to components.  The plugin is activated when the menu item is selected and you will receive relevant information like the currently selected folder.
        
<p>3) Configuration (<a href="http://cvs.gnome.org/viewcvs/evolution/plugins/subject-thread/">subject-thread</a>)

<p>You can add configuration items to any configuration dialogs in Evolution (well, calendar fully converted yet).  You can add whole tabs or sections or insert an additional item into existing sections.  The plugin is activated for you to insert your items and optionally to abort/commit/validate (for non-instant apply items).
        
<p>4) Formatters (<a href="http://cvs.gnome.org/viewcvs/evolution/plugins/prefer-plain/">prefer-plain</a>)

<p>These are specific to the mailer, you can handle any mime type with a "formatter" or override existing behaviour.  The plugin is activated when a message needs to display a relevant mime type and you will receive information such as the full message.
        
<p>There is an additional plugin hook, "Events", currently we only have the "new mail" event for it.

<h3>Enabling Plugins</h3>

<p>To enable plugins, you must be using the CVS mainline (2.1, part of GNOME 2.10) and you must enable plugins, --enable-plugins=all or --enable-plugins="list of plugin names"

<h3>Writing a Plugin</h3>

<p>Plugins can be written in C or potentially in any mono language for this (the support for mono is still experimental). A basic plugin consists of two pieces, a .eplug xml definition file and a shared library implementing the plugin.  The .eplug file contains the basic plugin information , such as the unique id of the plugin, the type (shlib or mono), the location (to the .so or dll) as well as the name and description of the plugin.  Each plugin then lists the specific "hooks" its interested, for instance org.gnome.evolution.mail.bonobomenu:1.0, which is a menu hook for the mailer component, plugins can have more than one hook (see evolution/plugins/prefer-plain).  Each hook type then has definitions specifc to it, for instance popup menus have a "menu" item with an "id" property that specifies the exact menu the plugin is modifying, followed by a list of "item"'s to be added to the menu.

<p>Plugins receive function calls based on the .eplug definition for instance each popup menu <item> has an "activate" property field that specifies the function to be called when the popup menu item is activated in the UI.  The function calls into the plugin generally pass the plugin itself and the relevant target data structure.

<p>More complete documentation can be found at <a href="http://www.gnome.org/projects/evolution/developer-doc/eplugin/">http://www.gnome.org/projects/evolution/developer-doc/eplugin/</a>.

<h3>Hackfest Ideas</h3>

<p>A few ideas below to get you started, by no means an exhaustive list.

<p><b>Plugins</b>

<ul><li>right click on a web calendar to refresh it
<li>right click on mail message to create task from message
<li>right click on mail folder can mark all messages as read
<li>tnef formatter (based on gtnef)
<li>right click on calendar folder to save it out to disk in icalendar format (<a href="http://cvs.gnome.org/viewcvs/evolution/plugins/save-calendar/">save-calendar</a>)
<li>right click on an imap mail folder to unsubscribe
<li>right click on an email address in a mail does a beagle/best search
<li>a formatter for open office that allows a user track versions of the same document
<li>emit dbus message when new mail arrives so beagle can update
</ul>

<p><b>Plugin Hooks</b>
<ul><li>look at converting event, task and addressbook editors to e-config so that UI items could be inserted/removed based on the backend
<li>add new events, possible ideas include "send", "quit", "folder deleted", "task completed"
<li>add a completely new hook, for instance to rewrite messages before they are sent
</ul>

<!--#include virtual="foot.shtml"-->
