#use wml::www.gnome.org::devtools-page menu=components

set-last-changed "$Date$">

<document title="components">
<content>

<head1><a href="gnome-build.html">gnome-build</a></head1>

gnome-build will provide the project management components of the
development environment.  This includes management of source-code
resources, generation of makefiles, and build management.
<p>
We have the following goals for gnome-build:
<ul>
<li> Backend independent
  gnome-build will provide support for multiple build systems to best
  integrate with the user's existing systems.
<p>
<li> Autoconf/automake integration
  Our main focus will go into an autoconf/automake backend.  This
  backend will create and read Makefile.am and configure.in files in a
  manner consistent with the majority of current free software
  projects.
<p>
<li> Configuration support
  Multiple configurations will be supported by the gnome-build
  framework.  For example, a user could seperate Debug and Release
  configurations with different build flags between them.
</ul>

<head1><a href="gnome-debug.html">gnome-debug</a></head1>

gnome-debug will handle debugging aspects of the environment.
<p>
These are our goals for gnome-debug :
<ul>
<li> Backend independent
  gnome-debug is designed to work with different backend debuggers.
  This will let the gnome-debug framework debug apps written in a
  variety of languages, including C, Python, Perl, and Java.
<p>
<li> Quick access to debugging information
  Debugging is a pain.  gnome-debug hopes to speed up the process as
  much as possible by making debugging information easy to get to, and
  as plentiful as possible.
</ul>


<head1><a href="gpf.html">gpf</a></head1>

The program analysis framework will provide components with a
syntactic and semantic representation of the source code used in the
project.  This will provide the basis for such components as class
browsers, syntax highlighters, and smart editors that help the user
along as they write code.
<p>
Some goals for gpf:
<ul>
<li> (have mslicker write some of these)
</ul>

<head1>gnome-vcs</head1>
gnome-vcs will provide integration with version control systems such as 
CVS.  
<p>
Goals:
<ul>
<li> Integration with gnome-build, to allow transparent use of version control
  in the project manager
<p>
<li> I can't think of anything else offhand
</ul>

<head1>editors</head1>
...GtkEditor, glimmer, gnomacs, and Desktop::Editor
<p>
Everyone has their favorite editor.  Rather than force users to use a
single editor, we provide a Desktop::Editor corba interface that any
editor can implement to integrate with the rest of the environment.
We hope to have as many editors support this interface as possible.

<head1>tying it together</head1>

These components will be tied together into a cohesive development
environment.  There are currently two projects which aim to integrate
these components: gIDE and MooonSooon.  These projects will provide
the following functionality:
<ul>
<li> A user friendly gui tying together the various components.
<p>
<li> Scripting capabilities (tied into the CORBA/bonobo infrastructure of the 
  framework).
<p>
<li> Some form of help system.
</ul>

</content>
</document>