<!--#set var="title" value="GNOME Devtools Overview" -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
  "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<head>
<title><!--#echo var="title" --></title>
<link rel="stylesheet" href="go.css" type="text/css">
</head>
<body bgcolor="#FFFFFF">

<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tr>
   
<td align="left" style="background: #ffffff" width="100%" height=135 colspan=2 valign="bottom">
<img src="images/devtools-header4.png" alt="Logo Banner" border="0"></img>
      &nbsp;
    </td>

  </tr>

<!--#include virtual="head.shtml" -->

 <td valign="top">
      <p><h1>GNOME Devtools Overview</h1></p>
<P>
Our end goal is to create an easy to use and powerful environment for developing applications. This means having an environment that the user can tailor to his or her needs, and that fits in with the developer's way of working.
</P>
<P>
Our basic strategy is to build small, well defined components that will work together to form a complete environment. We'll be using the bonobo component model to help achieve these goals. Having these seperate components should keep development manageable. Most implementation details can be left to the maintainers of the various components, and only the interaction of the public interfaces will need to be coordinated across components.</P>
<H2>What pieces are needed</H2>
<P>
A basic development environment consists of a few different pieces. Some fundamental pieces of a development environment are (in no particular order):</P>
<UL>
<LI>A project management/build system</LI>
<LI>An editor</LI>
<LI>A debugger</LI>
<LI>Code analysis tools (class browsers, etc)</LI>
<LI>A documentation system.</LI>
<LI>GUI builders.</LI>
<LI>Code generators.</LI>
<LI>Revision control.</LI>
<LI>Process tools (things like UML integration, bug tracking, etc).</LI>
</UL>
<P>
Some pieces of the environment need to communicate with other parts to be effective. For example, integration of revision control and project management is obviously beneficial, and code generators can often benefit from services provided by the code analysis tools. Other pieces, like the debugger and documentation systems, don't really need as much interaction with the other pieces.
</P><P>
These are the tools that we need to work on. Most pieces have a significant codebase we can reuse.
What we're working on </P>

<P>
Most of the pieces we have already started on. Our current projects include:
<P>
<UL>
<LI>Project Management<BR>
gnome-build is our project management and build system component. It is based on automake/autoconf, but we're trying to keep it generic enough so it'll hopefully be easily adaptable to other build systems This project is in the embryonic stages. The contact for this gnome-build is Martijn van Beers .</LI>

<LI>Editors<BR>
The choice of editors is a religious one. So rather than trying to force an editor on someone, we're working on integrating many different editors into the framework. Some editors we plan on working with include (x)emacs, some sort of vi, glimmer (formerly codecommander) and
Scintilla.</LI>

<LI>Debugger<BR>
gnome-debug is our debugging component. It is backend independent, but currently only a gdb backend exists (except for a half-formed python backend sitting on my hard drive). This component is basically useable, see http://internet.oit.edu/~campd/gdf/. The contact for gnome-debug is Dave Camp. Another debugging tool is GNU Visual Debugger.</LI>

<LI>Code Analysis<BR>
gpf is a framework for incremental program analysis and fine-grained document versioning. It will form the basis of the code analysis and generation tools. Ideally, most tools modifying source code will use gpf to do it in a clean, structured manner. gpf is basically embryonic at the moment. The contact for gpf is Mark Slicker.</LI>

<LI>Shell<BR>
Currently we have two systems providing a shell gIDE and Anjuta.
</LI></UL>
Mark Slicker has done a Dia diagram showing the interaction of the components we have. It is available at http://www.gnome.org/~campd/devtools-overview.dia.</P><P>
Notes for future development<BR>
Here are some random thoughts about the various projects that need to be done:
<P>
Documentation system: Whatever system gnome has. The tough part is actually getting the documentation - gnome is pretty bad on this front.
<P>
GUI builder: There are a few gtk-based gui builders out there, the most prominent being glade. We will be able adapt any of those to work with the devel-environment through the interfaces we'll define for gui builders.
<P>
Code generators: Kinda like MSVC's classwizards and appwizards and stuff. These will most likely be based at least partially on gpf.
<P>
Revision control: Should be backend independent, with CVS being the most important backend. Will need to work with gnome-build.



    
<!--#include virtual="foot.shtml"-->
