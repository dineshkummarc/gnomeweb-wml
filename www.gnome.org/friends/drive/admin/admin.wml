#!/usr/bin/env python

from math import pi
import cairo
import cgi
import os
import re
import shutil
import cgitb
cgitb.enable()

path = '@DRIVE_PATH@'
webroot = '@DRIVE_WEBROOT@'

class Graph:
    def __init__ (self, amount):
        self.amount = amount
        self.height = 20
        self.width = 400
        self.end = int(2 * self.width * min(self.amount / 50000, 1.0)) / 2.0

        self.border1 = (0.703125, 0.703125, 0.703125)
        self.border2 = (0.43359375, 0.43359375, 0.43359375)
        self.inactive_bg1 = (0.94140625, 0.94140625, 0.94140625)
        self.inactive_bg2 = (0.60546875, 0.60546875, 0.60546875)
        self.active_bg1 = (0.5390625, 0.8828125, 0.203125)
        self.active_bg2 = (0.3046875, 0.6015625, 0.0234375)

        self.border_grad = cairo.LinearGradient (0, 0, 0, self.height)
        self.border_grad.add_color_stop_rgb (0, *self.border1)
        self.border_grad.add_color_stop_rgb (1, *self.border2)

        self.surface = cairo.ImageSurface (cairo.FORMAT_ARGB32, self.width, self.height)
        self.context = cairo.Context (self.surface)

    def fill_active (self):
        grad = cairo.LinearGradient (0, 0, 0, self.height)
        grad.add_color_stop_rgb (0.3, *self.active_bg1)
        grad.add_color_stop_rgb (1.0, *self.active_bg2)
        self.context.set_source (grad)
        self.context.fill_preserve ()

        grad = cairo.LinearGradient (0, 0, 0, self.height)
        grad.add_color_stop_rgb (0, 0.3515625, 0.7109375, 0)
        grad.add_color_stop_rgb (1, 0.24609375, 0.48046875, 0.0078125)
        self.context.set_source (grad)
        self.context.stroke ()

    def draw (self):
        # Fill with white background
        self.context.new_path ()
        self.context.move_to (0, 0)
        self.context.line_to (self.width, 0)
        self.context.line_to (self.width, self.height)
        self.context.line_to (0, self.height)
        self.context.set_source_rgb (1.0, 1.0, 1.0)
        self.context.fill ()

        # Construct the main ruler frame
        self.context.new_path ()
        self.context.set_line_width (1)
        self.context.move_to (6.5, 2.5)
        self.context.arc_negative (6.5, 6.5, 4, -pi/2, -pi)
        self.context.line_to (2.5, self.height - 6.5)
        self.context.arc_negative (6.5, self.height - 6.5, 4, -pi, -3*pi/2)
        self.context.line_to (self.width - 6.5, self.height - 2.5)
        self.context.arc_negative (self.width - 6.5, self.height - 6.5, 4, pi/2, 0)
        self.context.line_to (self.width - 2.5, 6.5)
        self.context.arc_negative (self.width - 6.5, 6.5, 4, 0, -pi/2)
        self.context.line_to (6.5, 2.5)

        if self.end >= self.width - 6.5:
            # It's as full as we can draw it, so just fill with active color
            self.fill_active ()
        else:
            # Otherwise fill with inactive...
            grad = cairo.LinearGradient (0, 0, 0, self.height)
            grad.add_color_stop_rgb (0.3, *self.inactive_bg1)
            grad.add_color_stop_rgb (1.0, *self.inactive_bg2)
            self.context.set_source (grad)
            self.context.fill_preserve ()

            self.context.set_source (self.border_grad)
            self.context.stroke ()

            # Then construct the active frame, but only if it's full enough
            # for us to be able to draw it
            if self.end > 6.5:
                self.context.new_path ()
                self.context.set_line_width (1)

                self.context.move_to (self.end, 2.5)
                self.context.line_to (6.5, 2.5)
                self.context.arc_negative (6.5, 6.5, 4, -pi/2, -pi)
                self.context.line_to (2.5, self.height - 6.5)
                self.context.arc_negative (6.5, self.height - 6.5, 4, -pi, -3*pi/2)
                self.context.line_to (self.end, self.height - 2.5)

                self.fill_active ()

        # Then make some tick marks
        for i in range (1, 10):
            self.context.new_path ()
            self.context.move_to (i * (self.width / 10) - .5, 4.5)
            self.context.line_to (i * (self.width / 10) - .5, self.height - 4.5)
            self.context.set_source_rgba (1, 1, 1, 0.25)
            self.context.stroke ()
            self.context.new_path ()
            self.context.move_to (i * (self.width / 10) + .5, 4.5)
            self.context.line_to (i * (self.width / 10) + .5, self.height - 4.5)
            if i * (self.width / 10) > self.end:
                self.context.set_source (self.border_grad)
            else:
                self.context.set_source_rgba (0.24609375, 0.48046875, 0.0078125, 0.333)
            self.context.stroke ()

    def save (self):
        self.surface.write_to_png (os.path.join (path, 'drive.png.tmp'))

        jsfile = open (os.path.join (path, 'drive.js.tmp'), 'w')
        jsfile.write (
            'document.write(\'<div style="' +
            ('background-color:white;color:#2e3436;width:%ipx;' % self.width) +
            'text-align:center;' +
            '">' +
            ('<img src="%sdrive.png" width="%i" height="%i">'
             % (webroot, self.width, self.height)) +
            ('<div style="font-size:1.2em;font-weight:bold;">$%i of $50000 raised</div>'
             % self.amount) +
            '<div>Become a <a href="http://www.gnome.org/friends/">Friend of Gnome</a> today.</div>'
            '</div>\')\n')
        jsfile.close ()

        shutil.move (os.path.join (path, 'drive.png.tmp'),
                     os.path.join (path, 'drive.png'))
        shutil.move (os.path.join (path, 'drive.js.tmp'),
                     os.path.join (path, 'drive.js'))

query = cgi.parse ()
amount = query['amount'][0]
if amount.startswith ('$'):
    amount = amount[1:]
amount = re.sub (',', '', amount)
amount = float (amount)
graph = Graph (amount)
graph.draw ()
graph.save ()
print 'Content-type: text/html\n'
print '<html><body>Thanks!</body></html>'
